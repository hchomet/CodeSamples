using Frankenstein;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.Numerics;
using OrbitFinderCLR;
namespace DXApplication1
{


    public partial class Form1 : DevExpress.XtraEditors.XtraForm
    {
        public Form1()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the ExcelDataSource
            excelDataSource1.Fill();


            IList list = ((IListSource)excelDataSource1).GetList();
            DevExpress.DataAccess.Native.Excel.DataView dataView = (DevExpress.DataAccess.Native.Excel.DataView)list;
            List<PropertyDescriptor> props = dataView.Columns.ToList<PropertyDescriptor>();
            DataTable table = new DataTable();
            for (int i = 0; i < props.Count; i++)
            {
                PropertyDescriptor prop = props[i];
                table.Columns.Add(prop.Name, prop.PropertyType);

            }

            object[] values = new object[props.Count];
            foreach (DevExpress.DataAccess.Native.Excel.ViewRow item in list)
            {
                for (int i = 0; i < values.Length; i++)
                {
                    values[i] = props[i].GetValue(item);
                }
                table.Rows.Add(values);
            }

            gridControl1.DataSource = table;
        }


        private void button1_Click(object sender, EventArgs e)
        {
            gridControl1.Update();
            DevExpress.DataAccess.Native.Excel.DataView resultView = ((IListSource)excelDataSource1).GetList() as DevExpress.DataAccess.Native.Excel.DataView;
            DataTable dt = new DataTable("MyTable");
            resultView.Columns.ForEach(col => dt.Columns.Add(new DataColumn(col.Name, col.PropertyType)));
            foreach (DevExpress.DataAccess.Native.Excel.ViewRow row in resultView)
            {
                object[] value = new object[resultView.Columns.Count];
                for (int i = 0; i < resultView.Columns.Count; i++)
                {
                    value[i] = resultView.Columns[i].GetValue(row);
                }
                dt.Rows.Add(value);
            }

            dt.WriteXml("data" +DateTime.Today.ToString()+".xml", XmlWriteMode.WriteSchema);

        }

        private void calculate_prefactors(object sender, EventArgs e) 
        {
            MessageBox.Show("Functionality is not implemented");
        }

        private void calculate_orbits(object sender, EventArgs e)
        {
        
            DevExpress.DataAccess.Native.Excel.DataView resultView = ((IListSource)excelDataSource1).GetList() as DevExpress.DataAccess.Native.Excel.DataView;
            InputManaged p = new InputManaged(resultView);

            Input inputCore = new Input((float)p.omega, (float)p.Up, (float)p.E1g, (float)p.E2g, (float)p.E2e,
                (float)p.p_max, (float)p.p_min, (float)p.dp, (float)p.p_perp_max, (float)p.p_perp_min, (float)p.dp_perp);

            double omega = inputCore.Omega();



        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
          //  string outputPath = this.colValue.ToString();
        }

        private void gridControl1_Click(object sender, EventArgs e)
        {

        }
    }
}
